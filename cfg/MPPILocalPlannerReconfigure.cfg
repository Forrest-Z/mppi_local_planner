#!/usr/bin/env python
PACKAGE= "mppi_local_planner"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
#add_generic_localplanner_params(gen)

# For integers and doubles:
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max


grp_controller = gen.add_group("Controller", type = "tab")

# controller
grp_controller.add("time_steps", int_t, 0,
        "how many steps do you want to use in sampling",
        32, 20, 100)

grp_controller.add("model_dt", double_t, 0,
        "how long every time step",
        0.1, 0.01, 1.0)

grp_controller.add("batch_size", int_t, 0,
        "how many trajectories will be generated",
        1800, 10, 5000)

grp_controller.add("vx_std", double_t, 0,
        "standard deviation of noise generating in x-axis (linear velocity)",
        0.2, 0, 1.0)

grp_controller.add("vy_std", double_t, 0,
        "standard deviation of noise generating in y-axis (linear velocity)",
        0.0, 0, 1.0)

grp_controller.add("wz_std", double_t, 0,
        "standard deviation of noise generating in z-axis (angular velocity)",
        0.4, 0, 1.0)

grp_controller.add("vx_max", double_t, 0,
        "max linear velocity of robot on x-axis",
        0.6, 0, 2.0)

grp_controller.add("vx_min", double_t, 0,
        "min linear velocity of robot on x-axis",
        -0.11, -1.0, 1.0)

grp_controller.add("vy_max", double_t, 0,
        "max linear velocity of robot on y-axis",
        0.0, 0, 2.0)

grp_controller.add("wz_max", double_t, 0,
        "max angular velocity of robot on z-axis",
        1.0, 0, 3.0)

grp_controller.add("temperature", double_t, 0,
        "Selectiveness of trajectories by their costs (The closer this value to 0, the more we take in consideration controls with less cost), 0 mean use control with best cost, huge value will lead to just taking mean of all trajectories without cost consideration",
        0.3, 0, 2.0)

grp_controller.add("gamma", double_t, 0,
        "A trade-off between smoothness (high) and low energy (low). This is a complex parameter that likely won't need to be changed from the default of `0.1` which works well for a broad range of cases",
        0.015, 0, 1.0)

grp_controller.add("shift_control_sequence", bool_t, 0,
        "",
        False)

grp_controller.add("retry_attempt_limit", int_t, 0,
        "",
        3, 0, 10)

grp_controller.add("look_ahead", int_t, 0,
        "",
        10, 0, 30)

grp_controller.add("curvature_estimate_point", int_t, 0,
        "",
        6, 0, 20)

grp_controller.add("visualize", bool_t, 0,
        "",
        False)


# path handler
grp_path_handler = gen.add_group("PathHandler", type = "tab")

grp_path_handler.add("path_handler_prune_distance", double_t, 0,
        " ",
        1.5, 0, 5)

grp_path_handler.add("path_handler_transform_tolerance", double_t, 0,
        " ",
        0.1, 0, 2)

grp_path_handler.add("path_handler_enforce_path_inversion", bool_t, 0,
        " ",
        False)

grp_path_handler.add("path_handler_inversion_xy_tolerance", double_t, 0,
        " ",
        0.2, 0, 1)

grp_path_handler.add("path_handler_inversion_yaw_tolerance", double_t, 0,
        " ",
        0.4, 0, 5)

grp_path_handler.add("path_handler_inversion_locale", int_t, 0,
        " ",
        0, 0, 5)


# noise generator
grp_noise_generator = gen.add_group("NoiseGenerator", type = "tab")

grp_noise_generator.add("noise_generator_regenerate", bool_t, 0,
        " ",
        True)


# trajectory visualizer
grp_trajectory_visualizer = gen.add_group("TrajectoryVisualizer", type = "tab")

grp_trajectory_visualizer.add("trajectory_visualizer_time_step", int_t, 0,
        " ",
        3, 0, 10)

grp_trajectory_visualizer.add("trajectory_visualizer_trajectory_step", int_t, 0,
        " ",
        5, 0, 20)


# constraint critic
grp_constraint = gen.add_group("ConstraintCritic", type = "tab")

grp_constraint.add("constraint_enabled", bool_t, 0,
        " ",
        True)

grp_constraint.add("constraint_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_constraint.add("constraint_cost_weight", double_t, 0,
        " ",
        4.0, 0, 100.0)

grp_constraint.add("constraint_vx_acc_max", double_t, 0,
        " ",
        0.6, 0, 2.0)

grp_constraint.add("constraint_wz_acc_max", double_t, 0,
        " ",
        0.8, 0, 3.0)


# ackermann constraints
grp_ackermann = gen.add_group("AckermannConstraints", type = "tab")

grp_ackermann.add("ackermann_min_turning_r", double_t, 0,
        " ",
        0.25, 0, 1.0)


# goal critic
grp_goal = gen.add_group("GoalCritic", type = "tab")

grp_goal.add("goal_enabled", bool_t, 0,
        " ",
        True)

grp_goal.add("goal_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_goal.add("goal_cost_weight", double_t, 0,
        " ",
        10.0, 0, 100.0)

grp_goal.add("goal_threshold_to_consider", double_t, 0,
        " ",
        1.0, 0, 2.0)


# goal angle critic
grp_goal_angle = gen.add_group("GoalAngleCritic", type = "tab")

grp_goal_angle.add("goal_angle_enabled", bool_t, 0,
        " ",
        True)

grp_goal_angle.add("goal_angle_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_goal_angle.add("goal_angle_cost_weight", double_t, 0,
        " ",
        5.0, 0, 100.0)

grp_goal_angle.add("goal_angle_threshold_to_consider", double_t, 0,
        " ",
        1.0, 0, 2.0)



# prefer forward critic
grp_prefer_forward = gen.add_group("PreferForwardCritic", type = "tab")

grp_prefer_forward.add("prefer_forward_enabled", bool_t, 0,
        " ",
        True)

grp_prefer_forward.add("prefer_forward_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_prefer_forward.add("prefer_forward_cost_weight", double_t, 0,
        " ",
        20.0, 0, 100.0)

grp_prefer_forward.add("prefer_forward_threshold_to_consider", double_t, 0,
        " ",
        0.3, 0, 2.0)


# obstacles critic
grp_obstacles = gen.add_group("ObstaclesCritic", type = "tab")

grp_obstacles.add("obstacles_enabled", bool_t, 0,
        " ",
        True)

grp_obstacles.add("obstacles_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_obstacles.add("obstacles_collision_cost", int_t, 0,
        " ",
        100000, 0, 10000000)

grp_obstacles.add("obstacles_critical_weight", double_t, 0,
        " ",
        20.0, 0, 100.0)

grp_obstacles.add("obstacles_repulsion_weight", double_t, 0,
        " ",
        1.5, 0, 100.0)

grp_obstacles.add("obstacles_consider_footprint", bool_t, 0,
        " ",
        False)

grp_obstacles.add("obstacles_near_goal_distance", double_t, 0,
        " ",
        0.5, 0, 2.0)

grp_obstacles.add("obstacles_collision_margin_distance", double_t, 0,
        " ",
        0.1, 0, 1.0)


# cost critic
grp_cost = gen.add_group("CostCritic", type = "tab")

grp_cost.add("cost_enabled", bool_t, 0,
        " ",
        True)

grp_cost.add("cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_cost.add("cost_weight", double_t, 0,
        " ",
        10.0, 0, 100.0)

grp_cost.add("cost_critical_cost", int_t, 0,
        " ",
        300, 0, 1000)

grp_cost.add("cost_collision_cost", int_t, 0,
        " ",
        1000000, 0, 10000000)

grp_cost.add("cost_consider_footprint", bool_t, 0,
        " ",
        True)

grp_cost.add("cost_near_goal_distance", double_t, 0,
        " ",
        0.5, 0, 2.0)


# path align critic
grp_path_align = gen.add_group("PathAlignCritic", type = "tab")

grp_path_align.add("path_align_enabled", bool_t, 0,
        " ",
        True)

grp_path_align.add("path_align_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_path_align.add("path_align_cost_weight", double_t, 0,
        " ",
        30.0, 0, 100.0)

grp_path_align.add("path_align_threshold_to_consider", double_t, 0,
        " ",
        0.1, 0, 2.0)

grp_path_align.add("path_align_offset_from_furthest", int_t, 0,
        " ",
        0, 0, 10)

grp_path_align.add("path_align_trajectory_point_step", int_t, 0,
        " ",
        4, 0, 20)

grp_path_align.add("path_align_use_path_orientations", bool_t, 0,
        " ",
        True)

grp_path_align.add("path_align_orientation_weight", double_t, 0,
        " ",
        0.05, 0, 1.0)

grp_path_align.add("path_align_max_path_occupancy_ratio", double_t, 0,
        " ",
        0.3, 0, 1.0)


# path follow critic
grp_path_follow = gen.add_group("PathFollowCritic", type = "tab")

grp_path_follow.add("path_follow_enabled", bool_t, 0,
        " ",
        True)

grp_path_follow.add("path_follow_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_path_follow.add("path_follow_cost_weight", double_t, 0,
        " ",
        5.0, 0, 100.0)

grp_path_follow.add("path_follow_threshold_to_consider", double_t, 0,
        " ",
        0.1, 0, 2.0)

grp_path_follow.add("path_follow_offset_from_furthest", int_t, 0,
        " ",
        6, 0, 10)


# path angle critic
grp_path_angle = gen.add_group("PathAngleCritic", type = "tab")

grp_path_angle.add("path_angle_enabled", bool_t, 0,
        " ",
        True)

grp_path_angle.add("path_angle_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_path_angle.add("path_angle_cost_weight", double_t, 0,
        " ",
        10.0, 0, 100.0)

grp_path_angle.add("path_angle_threshold_to_consider", double_t, 0,
        " ",
        0.1, 0, 2.0)

grp_path_angle.add("path_angle_offset_from_furthest", int_t, 0,
        " ",
        4, 0, 10)

grp_path_angle.add("path_angle_mode", int_t, 0,
        " ",
        0, 0, 3)

grp_path_angle.add("path_angle_max_angle_to_furthest", double_t, 0,
        " ",
        0.785398, 0, 3.14)


# twirling critic
grp_twirling = gen.add_group("TwirlingCritic", type = "tab")

grp_twirling.add("twirling_enabled", bool_t, 0,
        " ",
        True)

grp_twirling.add("twirling_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_twirling.add("twirling_cost_weight", double_t, 0,
        " ",
        5.0, 0, 100)


# velocity critic
grp_velocity = gen.add_group("VelocityCritic", type = "tab")

grp_velocity.add("velocity_enabled", bool_t, 0,
        " ",
        True)

grp_velocity.add("velocity_cost_power", double_t, 0,
        " ",
        1.0, 0, 5.0)

grp_velocity.add("velocity_cost_weight", double_t, 0,
        " ",
        0.2, 0, 10.0)

grp_velocity.add("velocity_threshold_to_consider", double_t, 0,
        " ",
        0.1, 0, 2.0)

grp_velocity.add("velocity_max_vel_x", double_t, 0,
        " ",
        0.7, 0, 2.0)



exit(gen.generate(PACKAGE, "mppi_local_planner", "MPPILocalPlannerReconfigure"))
